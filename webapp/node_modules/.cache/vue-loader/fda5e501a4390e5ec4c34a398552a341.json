{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mcs/Desktop/MyGit/evd_pulse/webapp/src/dashboard/db.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mcs/Desktop/MyGit/evd_pulse/webapp/src/dashboard/db.vue","mtime":1587302336664},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZScKaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0LmpzJwoKZXhwb3J0IGRlZmF1bHQgewogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBicG1fb2JqZWN0OiB7fSwKICAgICAgICAgICAgYnBtX2FycmF5OiBbXSwKICAgICAgICAgICAgYnBtX2FycmF5X3NlcGVyYXRlOiB7CiAgICAgICAgICAgICAgICB0aW1lc3RhbXBzOiBbXSwKICAgICAgICAgICAgICAgIGJwbXM6IFtdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICBsZXQgYnBtX29iamVjdCA9IHt9CgogICAgICAgIC8vIEZldGNoIGRhdGEgZnJvbSBGaXJlYmFzZQogICAgICAgIGxldCBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCkKICAgICAgICBkYXRhYmFzZS5yZWYoJ2hpc3RvcnknKS5vbmNlKCd2YWx1ZScpLnRoZW4oKHNuYXBzaG90KSA9PiB7CiAgICAgICAgICAgIGJwbV9vYmplY3QgPSBzbmFwc2hvdC52YWwoKQoKICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGxldCBicG1fYXJyYXkgPSBbXQogICAgICAgICAgICBsZXQgdGltZXN0YW1wcyA9IFtdCiAgICAgICAgICAgIGxldCBicG1zID0gW10KCiAgICAgICAgICAgIC8vIENvbnZlcnQgT2JqZWN0IHRvIEFycmF5CiAgICAgICAgICAgIGZvciAobGV0IGxvZyBpbiBicG1fb2JqZWN0KSB7CiAgICAgICAgICAgICAgICBicG1fYXJyYXkucHVzaChbcGFyc2VJbnQobG9nKSwgYnBtX29iamVjdFtsb2ddXSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU29ydGluZyBBcnJheQogICAgICAgICAgICBicG1fYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKGFbMF0gPiBiWzBdKSA/IDEgOiAoYVswXSA8IGJbMF0pID8gLTEgOiAwCiAgICAgICAgICAgIH0pCgogICAgICAgICAgICAvLyBTZXBlcmF0ZSBCUE0gYW5kIFRpbWVzdGFtcAogICAgICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBicG1fYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChicG1fYXJyYXlbaV1bMF0pCiAgICAgICAgICAgICAgICBicG1zLnB1c2goYnBtX2FycmF5W2ldWzFdKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB0aGlzLmJwbV9hcnJheSA9IGJwbV9hcnJheQogICAgICAgICAgICB0aGlzLmJwbV9hcnJheV9zZXBlcmF0ZS50aW1lc3RhbXBzID0gdGltZXN0YW1wcwogICAgICAgICAgICB0aGlzLmJwbV9hcnJheV9zZXBlcmF0ZS5icG1zID0gYnBtcwoKICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5icG1fYXJyYXlfc2VwZXJhdGUudGltZXN0YW1wcwogICAgICAgICAgICBsZXQgZGF0ZXMgPSB0aW1lc3RhbXBzLm1hcChmdW5jdGlvbiAodGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICogMTAwMCkudG9Mb2NhbGVUaW1lU3RyaW5nKCkKICAgICAgICAgICAgfSkKCiAgICAgICAgICAgIC8vIEhpc3RvcnkgQlBNICdzIENoYXJ0IENvbXBvbmVudHMKICAgICAgICAgICAgbGV0IGhicG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGlzdG9yeUJQTScpLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgICAgIG5ldyBDaGFydChoYnBtLCB7CiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiBkYXRlcywKICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogW3sKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdCZWF0IHBlciBNaW51dGUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmJwbV9hcnJheV9zZXBlcmF0ZS5icG1zLAogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ2hzbCgzNDgsIDgzJSwgNDclKScsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgIGxlZ2VuZDogewogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCgogICAgICAgIH0pCiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICAvLyBFQ0cgUHVsc2UgaW4gUmVhbC10aW1lIFBhbmVsCiAgICAgICAgbGV0IGNlY2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudEVDRycpLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgbmV3IENoYXJ0KGNlY2csIHsKICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICBsYWJlbHM6IG5ldyBBcnJheSg1MCksCiAgICAgICAgICAgICAgICBkYXRhc2V0czogW3sKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0VDRycsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogWzAsIDAsIDIsIC04LCA4LCAtMiwgMCwgMF0sCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjRkZGJywKICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBsaW5lVGVuc2lvbjogMC4xLAogICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJywKICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLAoKICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0b29sdGlwczogewogICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgTGFzdDVfQlBNcmV2ZXJzZVNvcnRlZEFycmF5OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgbGV0IGJwbV9hcnJheSA9IHRoaXMuYnBtX2FycmF5CgogICAgICAgICAgICAvLyBSZXZlcnNlIFNvcnRpbmcgQ29tcGFyYXRvcgogICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlU29ydChhLCBiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKGFbMF0gPiBiWzBdKSA/IC0xIDogKGFbMF0gPCBiWzBdKSA/IDEgOiAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJwbV9hcnJheS5zb3J0KHJldmVyc2VTb3J0KSAgICAgICAgIC8vIERFU0MgU29ydGluZyBCUE0gQXJyYXkKICAgICAgICAgICAgcmV0dXJuIGJwbV9hcnJheS5zbGljZSgwLCA1KSAgICAgICAgLy8gUmV0dXJuIG9ubHkgNSBmaXJzdCBlbGVtZW50IGluIGFycmF5IChyZXZlcnNlZCkuCiAgICAgICAgfSwKICAgIH0sCiAgICBtZXRob2RzOiB7CgogICAgfQp9Cg=="},{"version":3,"sources":["db.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"db.vue","sourceRoot":"src/dashboard","sourcesContent":["<template>\n    <div>\n        <div class=\"container-fluid i-bg-red p-5\">\n            <div class=\"h4 mb-0\">Dashboard</div>\n            <div class=\"row my-5\">\n                <div class=\"col-7\">\n                    <canvas id=\"currentECG\" width=\"100\" height=\"25\"></canvas>\n                </div>\n                <div class=\"col-5\">\n                    <div class=\"h3 mb-0\">Current Pulse</div>\n                    <div>\n                        <span class=\"display-4\">82</span>\n                        <span class=\"ml-4\">BPMs</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid p-5\">\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <div class=\"h5 mb-2\">5-Last Messurement</div>\n                    <div class=\"p-3 hislog\" v-for=\"log in Last5_BPMreverseSortedArray\" :key=\"log.index\">\n                        <div class=\"d-inline-block h5 mb-0\">{{ log[1] }} BPM</div>\n                        <div class=\"d-inline-block font-weight-light float-right\">{{ log[0] | moment(\"D MMM YYYY &#8212 hh:mm A\") }}</div>\n                    </div>\n                </div>\n                <div class=\"col-8\">\n                    <canvas id=\"historyBPM\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<style scoped>\ndiv.hislog {\n    background-color: hsl(200, 50%, 97.5%);\n}\ndiv.hislog:nth-child(odd) {\n    background-color: hsl(200, 50%, 95%);\n}\n</style>\n<script>\nimport firebase from 'firebase'\nimport Chart from 'chart.js'\n\nexport default {\n    data() {\n        return {\n            bpm_object: {},\n            bpm_array: [],\n            bpm_array_seperate: {\n                timestamps: [],\n                bpms: []\n            }\n        }\n    },\n    created() {\n        let bpm_object = {}\n\n        // Fetch data from Firebase\n        let database = firebase.database()\n        database.ref('history').once('value').then((snapshot) => {\n            bpm_object = snapshot.val()\n\n        }).then(() => {\n            \n            let bpm_array = []\n            let timestamps = []\n            let bpms = []\n\n            // Convert Object to Array\n            for (let log in bpm_object) {\n                bpm_array.push([parseInt(log), bpm_object[log]])\n            }\n\n            // Sorting Array\n            bpm_array.sort(function(a, b) {\n                return (a[0] > b[0]) ? 1 : (a[0] < b[0]) ? -1 : 0\n            })\n\n            // Seperate BPM and Timestamp\n            for (let i=0; i < bpm_array.length; i++) {\n                timestamps.push(bpm_array[i][0])\n                bpms.push(bpm_array[i][1])\n            }\n            \n            this.bpm_array = bpm_array\n            this.bpm_array_seperate.timestamps = timestamps\n            this.bpm_array_seperate.bpms = bpms\n\n        }).then(() => {\n            \n            let timestamps = this.bpm_array_seperate.timestamps\n            let dates = timestamps.map(function (timestamp) {\n                let date = new Date(timestamp * 1000)\n                return new Date(timestamp * 1000).toLocaleTimeString()\n            })\n\n            // History BPM 's Chart Components\n            let hbpm = document.getElementById('historyBPM').getContext('2d');\n            new Chart(hbpm, {\n                type: 'line',\n                data: {\n                    labels: dates,\n                    datasets: [{\n                        label: 'Beat per Minute',\n                        data: this.bpm_array_seperate.bpms,\n                        borderColor: 'hsl(348, 83%, 47%)',\n                        fill: false,\n                    }]\n                },\n                options: {\n                    legend: {\n                        display: false\n                    },\n                    tooltips: {\n                        enabled: false\n                    }\n                }\n            })\n\n        })\n    },\n    mounted() {\n        // ECG Pulse in Real-time Panel\n        let cecg = document.getElementById('currentECG').getContext('2d');\n        new Chart(cecg, {\n            type: 'line',\n            data: {\n                labels: new Array(50),\n                datasets: [{\n                    label: 'ECG',\n                    data: [0, 0, 2, -8, 8, -2, 0, 0],\n                    borderColor: '#FFF',\n                    fill: false,\n                    lineTension: 0.1,\n                    pointBorderColor: 'rgba(0, 0, 0, 0)',\n                    pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n\n                }]\n            },\n            options: {\n                title: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                }\n            }\n        })\n    },\n    computed: {\n        Last5_BPMreverseSortedArray: function() {\n            let bpm_array = this.bpm_array\n\n            // Reverse Sorting Comparator\n            function reverseSort(a, b) {\n                return (a[0] > b[0]) ? -1 : (a[0] < b[0]) ? 1 : 0\n            }\n\n            bpm_array.sort(reverseSort)         // DESC Sorting BPM Array\n            return bpm_array.slice(0, 5)        // Return only 5 first element in array (reversed).\n        },\n    },\n    methods: {\n\n    }\n}\n</script>"]}]}