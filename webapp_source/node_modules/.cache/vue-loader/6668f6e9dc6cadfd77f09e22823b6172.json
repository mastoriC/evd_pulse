{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mcs/Desktop/MyGit/evd_pulse/webapp/src/dashboard/db.vue?vue&type=style&index=0&id=ba2e149c&scoped=true&lang=css&","dependencies":[{"path":"/Users/mcs/Desktop/MyGit/evd_pulse/webapp/src/dashboard/db.vue","mtime":1588085513439},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmRpdi5oaXNsb2cgewogICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIwMCwgNTAlLCA5Ny41JSk7Cn0KZGl2Lmhpc2xvZzpudGgtY2hpbGQob2RkKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjAwLCA1MCUsIDk1JSk7Cn0K"},{"version":3,"sources":["db.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA","file":"db.vue","sourceRoot":"src/dashboard","sourcesContent":["<template>\n    <div>\n        <div class=\"container-fluid i-bg-red p-5\">\n            <div class=\"h4 mb-0\">Dashboard</div>\n            <div class=\"row my-5\">\n                <div class=\"col-7\">\n                    <canvas id=\"currentECG\" width=\"100\" height=\"15\"></canvas>\n                </div>\n                <div class=\"col-5\">\n                    <div class=\"h3\">Current Pulse</div>\n                    <div v-if=\"current != '-'\">\n                        <span class=\"display-4\">{{ current }}</span>\n                        <span class=\"ml-4\">BPMs</span>\n                    </div>\n                    <div v-else>\n                        <span class=\"h5\">No pulse detected</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid p-5\">\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <div class=\"h5 mb-2\">5-Last Messurement</div>\n                    <div class=\"p-3 hislog\" v-for=\"log in Last5_BPMreverseSortedArray\" :key=\"log.index\">\n                        <div class=\"d-inline-block h5 mb-0\">{{ log[1] }} BPM</div>\n                        <div class=\"d-inline-block font-weight-light float-right\">{{ log[0] | moment(\"D MMM YYYY &#8212 hh:mm A\") }}</div>\n                    </div>\n                </div>\n                <div class=\"col-8\">\n                    <canvas id=\"historyBPM\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<style scoped>\ndiv.hislog {\n    background-color: hsl(200, 50%, 97.5%);\n}\ndiv.hislog:nth-child(odd) {\n    background-color: hsl(200, 50%, 95%);\n}\n</style>\n<script>\nimport firebase from 'firebase'\nimport Chart from 'chart.js'\n\nexport default {\n    data() {\n        return {\n            current: '-',\n            pulse: '-',\n            bpm_object: {},\n            bpm_array: [],\n            bpm_array_seperate: {\n                timestamps: [],\n                bpms: []\n            }\n        }\n    },\n    mounted() {\n        let bpm_object = {}\n\n        // History BPM 's Chart Components\n        let hbpm = document.getElementById('historyBPM').getContext('2d');\n        let hbpm_chart = new Chart(hbpm, {\n            type: 'line',\n            data: {\n                labels: this.bpm_array_seperate.timestamps,\n                datasets: [{\n                    label: 'Beat per Minute',\n                    data: this.bpm_array_seperate.bpms,\n                    borderColor: 'hsl(348, 83%, 47%)',\n                    fill: false,\n                }]\n            },\n            options: {\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                }\n            }\n        })\n\n        function time2date(timestamp) {\n            return new Date(timestamp).toLocaleTimeString()\n        }\n\n        // Fetch data from Firebase\n        let database = firebase.database()\n\n        database.ref('current/bpm').on('value', (snapshot) => {\n            this.current = snapshot.val()\n        })\n        database.ref('current/pulse').on('value', (snapshot) => {\n            this.pulse = snapshot.val()\n        })\n\n        // Messurement History log\n        database.ref('history').on('child_added', (snapshot) => {\n            bpm_object = snapshot.val()\n            this.bpm_array.push([bpm_object['timestamp'], bpm_object['bpm']])\n            this.bpm_array_seperate.timestamps.push(time2date(bpm_object['timestamp']))\n            this.bpm_array_seperate.bpms.push(bpm_object['bpm'])\n            if (this.bpm_array.length > 15) {\n                this.bpm_array.shift()\n                this.bpm_array_seperate.timestamps.shift()\n                this.bpm_array_seperate.bpms.shift()\n            }\n            hbpm_chart.update()\n        })\n\n        let ecgPulses = new Array(50)\n        for (let i=0; i<ecgPulses.length; i++) {\n            ecgPulses[i] = '-'\n        }\n\n        // ECG Pulse in Real-time Panel\n        let cecg = document.getElementById('currentECG').getContext('2d');\n        let cecg_chart = new Chart(cecg, {\n            type: 'line',\n            data: {\n                labels: new Array(50),\n                datasets: [{\n                    label: 'ECG',\n                    data: ecgPulses,\n                    borderColor: '#FFF',\n                    fill: false,\n                    lineTension: 0.1,\n                    pointBorderColor: 'rgba(0, 0, 0, 0)',\n                    pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n                    borderWidth: 1\n\n                }]\n            },\n            options: {\n                title: {\n                    display: false\n                },\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                },\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            display: false\n                        },\n                        ticks: {\n                            display: false\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            display: false\n                        },\n                        ticks: {\n                            display: false\n                        }\n                    }]\n                }\n            }\n        })\n\n        // Update ecgGraph every 100ms\n        const ecgGraph = () => {\n            setTimeout(() => {\n                ecgPulses.unshift(this.pulse)\n                ecgPulses.pop()\n                cecg_chart.update()\n                ecgGraph()\n            }, 100)\n        }\n        ecgGraph()\n    },\n    computed: {\n        Last5_BPMreverseSortedArray: function() {\n            let bpm_array = this.bpm_array\n\n            // Reverse Sorting Comparator\n            function reverseSort(a, b) {\n                return (a[0] > b[0]) ? -1 : (a[0] < b[0]) ? 1 : 0\n            }\n\n            bpm_array.sort(reverseSort)         // DESC Sorting BPM Array\n            return bpm_array.slice(0, 5)        // Return only 5 first element in array (reversed).\n        },\n    },\n    methods: {\n\n    }\n}\n</script>"]}]}